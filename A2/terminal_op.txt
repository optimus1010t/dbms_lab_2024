21CS30054@cpusrv-xeon-71:~$ psql
Password for user 21CS30054: 
psql (13.13)
Type "help" for help.

21CS30054=> \c 21CS30054
You are now connected to database "21CS30054" as user "21CS30054".
21CS30054=> \i
\i: missing required argument
21CS30054=> \l
                                   List of databases
   Name    |   Owner   | Encoding |   Collate   |    Ctype    |    Access privileges    
-----------+-----------+----------+-------------+-------------+-------------------------
 21CS30035 | 21CS30035 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30035           +
           |           |          |             |             | 21CS30035=CTc/21CS30035
 21CS30036 | 21CS30036 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30036           +
           |           |          |             |             | 21CS30036=CTc/21CS30036
 21CS30037 | 21CS30037 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30037           +
           |           |          |             |             | 21CS30037=CTc/21CS30037
 21CS30038 | 21CS30038 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30038           +
           |           |          |             |             | 21CS30038=CTc/21CS30038
 21CS30039 | 21CS30039 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30039           +
           |           |          |             |             | 21CS30039=CTc/21CS30039
 21CS30040 | 21CS30040 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30040           +
           |           |          |             |             | 21CS30040=CTc/21CS30040
 21CS30041 | 21CS30041 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30041           +
           |           |          |             |             | 21CS30041=CTc/21CS30041
 21CS30042 | 21CS30042 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30042           +
           |           |          |             |             | 21CS30042=CTc/21CS30042
 21CS30043 | 21CS30043 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30043           +
           |           |          |             |             | 21CS30043=CTc/21CS30043
 21CS30044 | 21CS30044 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30044           +
           |           |          |             |             | 21CS30044=CTc/21CS30044
 21CS30045 | 21CS30045 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30045           +
           |           |          |             |             | 21CS30045=CTc/21CS30045
 21CS30046 | 21CS30046 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30046           +
           |           |          |             |             | 21CS30046=CTc/21CS30046
 21CS30047 | 21CS30047 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30047           +
           |           |          |             |             | 21CS30047=CTc/21CS30047
 21CS30048 | 21CS30048 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30048           +
           |           |          |             |             | 21CS30048=CTc/21CS30048
 21CS30049 | 21CS30049 | UTF8     | en_IN.UTF-8 | en_IN.UTF-8 | =T/21CS30049           +
21CS30054=> clear
21CS30054-> \clear
invalid command \clear
Try \? for help.
21CS30054-> \?
General
  \copyright             show PostgreSQL usage and distribution terms
  \crosstabview [COLUMNS] execute query and display results in crosstab
  \errverbose            show most recent error message at maximum verbosity
  \g [(OPTIONS)] [FILE]  execute query (and send results to file or |pipe);
                         \g with no arguments is equivalent to a semicolon
  \gdesc                 describe result of query, without executing it
  \gexec                 execute query, then execute each value in its result
  \gset [PREFIX]         execute query and store results in psql variables
  \gx [(OPTIONS)] [FILE] as \g, but forces expanded output mode
  \q                     quit psql
  \watch [SEC]           execute query every SEC seconds

Help
  \? [commands]          show help on backslash commands
  \? options             show help on psql command-line options
  \? variables           show help on special variables
  \h [NAME]              help on syntax of SQL commands, * for all commands

Query Buffer
  \e [FILE] [LINE]       edit the query buffer (or file) with external editor
  \ef [FUNCNAME [LINE]]  edit function definition with external editor
  \ev [VIEWNAME [LINE]]  edit view definition with external editor
  \p                     show the contents of the query buffer
  \r                     reset (clear) the query buffer
  \s [FILE]              display history or save it to file
  \w FILE                write query buffer to file

Input/Output
  \copy ...              perform SQL COPY with data stream to the client host
  \echo [-n] [STRING]    write string to standard output (-n for no newline)
  \i FILE                execute commands from file
  \ir FILE               as \i, but relative to location of current script
  \o [FILE]              send all query results to file or |pipe
  \qecho [-n] [STRING]   write string to \o output stream (-n for no newline)
  \warn [-n] [STRING]    write string to standard error (-n for no newline)

Conditional
  \if EXPR               begin conditional block
  \elif EXPR             alternative within current conditional block
  \else                  final alternative within current conditional block
  \endif                 end conditional block

Informational
  (options: S = show system objects, + = additional detail)
  \d[S+]                 list tables, views, and sequences
  \d[S+]  NAME           describe table, view, sequence, or index
  \da[S]  [PATTERN]      list aggregates
  \dA[+]  [PATTERN]      list access methods
  \dAc[+] [AMPTRN [TYPEPTRN]]  list operator classes
  \dAf[+] [AMPTRN [TYPEPTRN]]  list operator families
  \dAo[+] [AMPTRN [OPFPTRN]]   list operators of operator families
  \dAp[+] [AMPTRN [OPFPTRN]]   list support functions of operator families
  \db[+]  [PATTERN]      list tablespaces
  \dc[S+] [PATTERN]      list conversions
  \dC[+]  [PATTERN]      list casts
  \dd[S]  [PATTERN]      show object descriptions not displayed elsewhere
  \dD[S+] [PATTERN]      list domains
  \ddp    [PATTERN]      list default privileges
  \dE[S+] [PATTERN]      list foreign tables
  \det[+] [PATTERN]      list foreign tables
  \des[+] [PATTERN]      list foreign servers
  \deu[+] [PATTERN]      list user mappings
  \dew[+] [PATTERN]      list foreign-data wrappers
  \df[anptw][S+] [PATRN] list [only agg/normal/procedures/trigger/window] functions
  \dF[+]  [PATTERN]      list text search configurations
  \dFd[+] [PATTERN]      list text search dictionaries
  \dFp[+] [PATTERN]      list text search parsers
  \dFt[+] [PATTERN]      list text search templates
  \dg[S+] [PATTERN]      list roles
  \di[S+] [PATTERN]      list indexes
  \dl                    list large objects, same as \lo_list
  \dL[S+] [PATTERN]      list procedural languages
  \dm[S+] [PATTERN]      list materialized views
  \dn[S+] [PATTERN]      list schemas
  \do[S+] [PATTERN]      list operators
  \dO[S+] [PATTERN]      list collations
  \dp     [PATTERN]      list table, view, and sequence access privileges
  \dP[itn+] [PATTERN]    list [only index/table] partitioned relations [n=nested]
  \drds [PATRN1 [PATRN2]] list per-database role settings
  \dRp[+] [PATTERN]      list replication publications
  \dRs[+] [PATTERN]      list replication subscriptions
  \ds[S+] [PATTERN]      list sequences
  \dt[S+] [PATTERN]      list tables
  \dT[S+] [PATTERN]      list data types
  \du[S+] [PATTERN]      list roles
  \dv[S+] [PATTERN]      list views
  \dx[+]  [PATTERN]      list extensions
  \dy[+]  [PATTERN]      list event triggers
  \l[+]   [PATTERN]      list databases
  \sf[+]  FUNCNAME       show a function's definition
  \sv[+]  VIEWNAME       show a view's definition
  \z      [PATTERN]      same as \dp

Formatting
  \a                     toggle between unaligned and aligned output mode
  \C [STRING]            set table title, or unset if none
  \f [STRING]            show or set field separator for unaligned query output
  \H                     toggle HTML output mode (currently off)
  \pset [NAME [VALUE]]   set table output option
                         (border|columns|csv_fieldsep|expanded|fieldsep|
                         fieldsep_zero|footer|format|linestyle|null|
                         numericlocale|pager|pager_min_lines|recordsep|
                         recordsep_zero|tableattr|title|tuples_only|
                         unicode_border_linestyle|unicode_column_linestyle|
                         unicode_header_linestyle)
  \t [on|off]            show only rows (currently off)
  \T [STRING]            set HTML <table> tag attributes, or unset if none
  \x [on|off|auto]       toggle expanded output (currently off)

Connection
  \c[onnect] {[DBNAME|- USER|- HOST|- PORT|-] | conninfo}
                         connect to new database (currently "21CS30054")
  \conninfo              display information about current connection
  \encoding [ENCODING]   show or set client encoding
  \password [USERNAME]   securely change the password for a user

Operating System
  \cd [DIR]              change the current working directory
  \setenv NAME [VALUE]   set or unset environment variable
  \timing [on|off]       toggle timing of commands (currently off)
  \! [COMMAND]           execute command in shell or start interactive shell

Variables
  \prompt [TEXT] NAME    prompt user to set internal variable
  \set [NAME [VALUE]]    set internal variable, or list all if no parameters
  \unset NAME            unset (delete) internal variable

Large Objects
  \lo_export LOBOID FILE
  \lo_import FILE [COMMENT]
  \lo_list
  \lo_unlink LOBOID      large object operations
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> 
21CS30054-> CREATE TABLE Student (
21CS30054(>     Name varchar(255),
21CS30054(>     Roll varchar(50) PRIMARY KEY,
21CS30054(>     Dept varchar(100)
21CS30054(> )
21CS30054-> CREATE TABLE Student (Name varchar(255), Roll varchar(50) PRIMARY KEY, Dept varchar(100));
ERROR:  syntax error at or near "clear"
LINE 1: clear
        ^
21CS30054=> CREATE TABLE Student (Name varchar(255), Roll varchar(50) PRIMARY KEY, Dept varchar(100));
CREATE TABLE
21CS30054=> /dt
21CS30054-> \dt
          List of relations
 Schema |  Name   | Type  |   Owner   
--------+---------+-------+-----------
 public | student | table | 21CS30054
(1 row)

21CS30054-> CREATE TABLE Role (RID int PRIMARY KEY, Rname varchar(255) NOT NULL, Description varchar(1024), Student_Roll varchar(50) NOT NULL, FOREIGN KEY (Student_Roll) REFERENCES Student(Roll));
ERROR:  syntax error at or near "/"
LINE 1: /dt
        ^
21CS30054=> ^C
21CS30054=> CREATE TABLE Role (RID int PRIMARY KEY, Rname varchar(255) NOT NULL, Description varchar(1024), Student_Roll varchar(50) NOT NULL, FOREIGN KEY (Student_Roll) REFERENCES Student(Roll));
CREATE TABLE
21CS30054=> \dt
          List of relations
 Schema |  Name   | Type  |   Owner   
--------+---------+-------+-----------
 public | role    | table | 21CS30054
 public | student | table | 21CS30054
(2 rows)

21CS30054=> CREATE TABLE Event (EID int PRIMARY KEY, Date date NOT NULL, EName varchar(255) NOT NULL, Type varchar(100));
CREATE TABLE
21CS30054=> \dt
          List of relations
 Schema |  Name   | Type  |   Owner   
--------+---------+-------+-----------
 public | event   | table | 21CS30054
 public | role    | table | 21CS30054
 public | student | table | 21CS30054
(3 rows)

21CS30054=> CREATE TABLE Participant (PID int PRIMARY KEY, Name varchar(255) NOT NULL, College_Name varchar(255) NOT NULL, FOREIGN KEY (College_Name) REFERENCES College(Name));
ERROR:  relation "college" does not exist
21CS30054=> CREATE TABLE College (Name varchar(511) PRIMARY KEY, Location varchar(1023) NOT NULL);
CREATE TABLE
21CS30054=> CREATE TABLE Participant (PID int PRIMARY KEY, Name varchar(255) NOT NULL, College_Name varchar(255) NOT NULL, FOREIGN KEY (College_Name) REFERENCES College(Name));
CREATE TABLE
21CS30054=> CREATE TABLE MANAGE (Student_Roll int, EID int, PRIMARY KEY (Student_Roll, EID), FOREIGN KEY (Student_Roll) REFERENCES Student(Roll), FOREIGN KEY (EID) REFERENCES Event(EID));
ERROR:  foreign key constraint "manage_student_roll_fkey" cannot be implemented
DETAIL:  Key columns "student_roll" and "roll" are of incompatible types: integer and character varying.
21CS30054=> CREATE TABLE Event_Volunteer (Volunteer_Roll int, EID int, PRIMARY KEY (Volunteer_Roll, EID), FOREIGN KEY (Volunteer_Roll) REFERENCES Volunteer(Roll), FOREIGN KEY (EID) REFERENCES Event(EID));
ERROR:  relation "volunteer" does not exist
21CS30054=> CREATE TABLE Event_Participant (PID int, EID int, PRIMARY KEY (PID, EID), FOREIGN KEY (PID) REFERENCES Participant(PID), FOREIGN KEY (EID) REFERENCES Event(EID));
CREATE TABLE
21CS30054=> CREATE TABLE MANAGE (Student_Roll varchar(50), EID int, PRIMARY KEY (Student_Roll, EID), FOREIGN KEY (Student_Roll) REFERENCES Student(Roll), FOREIGN KEY (EID) REFERENCES Event(EID));
CREATE TABLE
21CS30054=> CREATE TABLE Volunteer (Roll int PRIMARY KEY);
CREATE TABLE
21CS30054=> CREATE TABLE Event_Volunteer (Volunteer_Roll int, EID int, PRIMARY KEY (Volunteer_Roll, EID), FOREIGN KEY (Volunteer_Roll) REFERENCES Volunteer(Roll), FOREIGN KEY (EID) REFERENCES Event(EID));
CREATE TABLE
21CS30054=> \dt
               List of relations
 Schema |       Name        | Type  |   Owner   
--------+-------------------+-------+-----------
 public | college           | table | 21CS30054
 public | event             | table | 21CS30054
 public | event_participant | table | 21CS30054
 public | event_volunteer   | table | 21CS30054
 public | manage            | table | 21CS30054
 public | participant       | table | 21CS30054
 public | role              | table | 21CS30054
 public | student           | table | 21CS30054
 public | volunteer         | table | 21CS30054
(9 rows)

21CS30054=> INSERT INTO Student (Name, Roll, Dept) VALUES 
21CS30054-> ('John Doe', 'S001', 'CSE'),
21CS30054-> ('Jane Smith', 'S002', 'Mathematics'),
21CS30054-> ('Alice Johnson', 'S003', 'Physics'),
21CS30054-> ('Chris Brown', 'S004', 'Chemistry'),
21CS30054-> ('Emma Wilson', 'S005', 'Biology');
INSERT 0 5
21CS30054=> INSERT INTO Role (RID, Rname, Description, Student_Roll) VALUES 
21CS30054-> (1, 'President', 'Leads the student council', 'S001'),
21CS30054-> (2, 'Vice President', 'Assists the president', 'S002'),
21CS30054-> (3, 'Secretary', 'In charge of documentation', 'S003'),
21CS30054-> (4, 'Treasurer', 'Manages finances', 'S004'),
21CS30054-> (5, 'Event Coordinator', 'Plans and coordinates events', 'S005');
INSERT 0 5
21CS30054=> INSERT INTO Event (EID, Date, EName, Type) VALUES 
21CS30054-> (101, '2024-02-15', 'Tech Symposium', 'Conference'),
21CS30054-> (102, '2024-03-10', 'Math Workshop', 'Workshop'),
21CS30054-> (103, '2024-04-05', 'Megaevent', 'Exhibition'),
21CS30054-> (104, '2024-05-20', 'Chemistry Fair', 'Fair'),
21CS30054-> (105, '2024-06-10', 'Biology Summit', 'Summit');
INSERT 0 5
21CS30054=> INSERT INTO Participant (PID, Name, College_Name) VALUES 
21CS30054-> (1001, 'Liam Neeson', 'IITB'),
21CS30054-> (1002, 'Olivia Rodrigo', 'IITB'),
21CS30054-> (1003, 'Noah Centineo', 'IITB'),
21CS30054-> (1004, 'Sophia Loren', 'IITB'),
21CS30054-> (1005, 'Jackson Wang', 'IITB');
ERROR:  insert or update on table "participant" violates foreign key constraint "participant_college_name_fkey"
DETAIL:  Key (college_name)=(IITB) is not present in table "college".
21CS30054=> INSERT INTO Participant (PID, Name, College_Name) VALUES 
21CS30054-> (1001, 'Liam Neeson', 'IITB'),
21CS30054-> (1002, 'Olivia Rodrigo', 'IITB'),
21CS30054-> (1003, 'Noah Centineo', 'IITB'),
21CS30054-> (1004, 'Sophia Loren', 'IITB'),
21CS30054-> (1005, 'Jackson Wang', 'IITB');
ERROR:  insert or update on table "participant" violates foreign key constraint "participant_college_name_fkey"
DETAIL:  Key (college_name)=(IITB) is not present in table "college".
21CS30054=> INSERT INTO College (Name, Location) VALUES 
21CS30054-> ('IITB', 'Mumbai'),
21CS30054-> ('Science College', 'California'),
21CS30054-> ('Liberal Arts Institute', 'Texas'),
21CS30054-> ('Engineering Academy', 'Florida'),
21CS30054-> ('Medical School', 'Washington');
INSERT 0 5
21CS30054=> INSERT INTO Participant (PID, Name, College_Name) VALUES 
21CS30054-> (1001, 'Liam Neeson', 'IITB'),
21CS30054-> (1002, 'Olivia Rodrigo', 'IITB'),
21CS30054-> (1003, 'Noah Centineo', 'IITB'),
21CS30054-> (1004, 'Sophia Loren', 'IITB'),
21CS30054-> (1005, 'Jackson Wang', 'IITB');
INSERT 0 5
21CS30054=> INSERT INTO Volunteer (Roll) VALUES 
21CS30054-> (9001),
21CS30054-> (9002),
21CS30054-> (9003),
21CS30054-> (9004),
21CS30054-> (9005);
INSERT 0 5
21CS30054=> INSERT INTO MANAGE (Student_Roll, EID) VALUES 
21CS30054-> ('S001', 101),
21CS30054-> ('S002', 102),
21CS30054-> ('S003', 103),
21CS30054-> ('S004', 104),
21CS30054-> ('S005', 105);
INSERT 0 5
21CS30054=> INSERT INTO Event_Volunteer (Volunteer_Roll, EID) VALUES 
21CS30054-> (9001, 101),
21CS30054-> (9002, 102),
21CS30054-> (9003, 103),
21CS30054-> (9004, 104),
21CS30054-> (9005, 105);
INSERT 0 5
21CS30054=> INSERT INTO Event_Participant (PID, EID) VALUES 
21CS30054-> (1001, 101),
21CS30054-> (1002, 102),
21CS30054-> (1003, 103),
21CS30054-> (1004, 104),
21CS30054-> (1005, 105);
INSERT 0 5
21CS30054=> \dt
               List of relations
 Schema |       Name        | Type  |   Owner   
--------+-------------------+-------+-----------
 public | college           | table | 21CS30054
 public | event             | table | 21CS30054
 public | event_participant | table | 21CS30054
 public | event_volunteer   | table | 21CS30054
 public | manage            | table | 21CS30054
 public | participant       | table | 21CS30054
 public | role              | table | 21CS30054
 public | student           | table | 21CS30054
 public | volunteer         | table | 21CS30054
(9 rows)

21CS30054=> SELECT * FROM Student;
     name      | roll |    dept     
---------------+------+-------------
 John Doe      | S001 | CSE
 Jane Smith    | S002 | Mathematics
 Alice Johnson | S003 | Physics
 Chris Brown   | S004 | Chemistry
 Emma Wilson   | S005 | Biology
(5 rows)

21CS30054=> Select * from participants
21CS30054-> 
21CS30054-> \dt
               List of relations
 Schema |       Name        | Type  |   Owner   
--------+-------------------+-------+-----------
 public | college           | table | 21CS30054
 public | event             | table | 21CS30054
 public | event_participant | table | 21CS30054
 public | event_volunteer   | table | 21CS30054
 public | manage            | table | 21CS30054
 public | participant       | table | 21CS30054
 public | role              | table | 21CS30054
 public | student           | table | 21CS30054
 public | volunteer         | table | 21CS30054
(9 rows)

21CS30054-> SELECT * from participants
21CS30054-> \dt
               List of relations
 Schema |       Name        | Type  |   Owner   
--------+-------------------+-------+-----------
 public | college           | table | 21CS30054
 public | event             | table | 21CS30054
 public | event_participant | table | 21CS30054
 public | event_volunteer   | table | 21CS30054
 public | manage            | table | 21CS30054
 public | participant       | table | 21CS30054
 public | role              | table | 21CS30054
 public | student           | table | 21CS30054
 public | volunteer         | table | 21CS30054
(9 rows)

21CS30054-> \dt
               List of relations
 Schema |       Name        | Type  |   Owner   
--------+-------------------+-------+-----------
 public | college           | table | 21CS30054
 public | event             | table | 21CS30054
 public | event_participant | table | 21CS30054
 public | event_volunteer   | table | 21CS30054
 public | manage            | table | 21CS30054
 public | participant       | table | 21CS30054
 public | role              | table | 21CS30054
 public | student           | table | 21CS30054
 public | volunteer         | table | 21CS30054
(9 rows)

21CS30054-> ^C
21CS30054=> SELECT * from participants
21CS30054-> ^C
21CS30054=> SELECT * from participant
21CS30054-> ^C
21CS30054=> SELECT * from Participant
21CS30054-> ;
 pid  |      name      | college_name 
------+----------------+--------------
 1001 | Liam Neeson    | IITB
 1002 | Olivia Rodrigo | IITB
 1003 | Noah Centineo  | IITB
 1004 | Sophia Loren   | IITB
 1005 | Jackson Wang   | IITB
(5 rows)

21CS30054=> Select * from participant;
 pid  |      name      | college_name 
------+----------------+--------------
 1001 | Liam Neeson    | IITB
 1002 | Olivia Rodrigo | IITB
 1003 | Noah Centineo  | IITB
 1004 | Sophia Loren   | IITB
 1005 | Jackson Wang   | IITB
(5 rows)

21CS30054=> SELECT S.Roll, S.Name 
21CS30054-> FROM Student S
21CS30054-> JOIN MANAGE M ON S.Roll = M.Student_Roll
21CS30054-> JOIN Event E ON M.EID = E.EID
21CS30054-> WHERE E.EName = 'Megaevent';
 roll |     name      
------+---------------
 S003 | Alice Johnson
(1 row)

21CS30054=> SELECT S.Roll, S.Name
21CS30054-> FROM Student S
21CS30054-> JOIN MANAGE M ON S.Roll = M.Student_Roll
21CS30054-> JOIN Event E ON M.EID = E.EID
21CS30054-> JOIN Role R ON M.RID = R.RID
21CS30054-> WHERE E.EName = 'Megaevent' AND R.Rname = 'Secretary';
ERROR:  column m.rid does not exist
LINE 5: JOIN Role R ON M.RID = R.RID
                       ^
HINT:  Perhaps you meant to reference the column "m.eid" or the column "r.rid".
21CS30054=> SELECT S.Roll, S.Name
21CS30054-> FROM Student S
21CS30054-> JOIN Role R ON S.Roll = R.Student_Roll
21CS30054-> JOIN MANAGE M ON S.Roll = M.Student_Roll
21CS30054-> JOIN Event E ON M.EID = E.EID
21CS30054-> WHERE E.EName = 'Megaevent' AND R.Rname = 'Secretary';
 roll |     name      
------+---------------
 S003 | Alice Johnson
(1 row)

21CS30054=> SELECT P.name
21CS30054-> FROM Participant P
21CS30054-> JOIN College C ON P.college_name = C.name
21CS30054-> JOIN Event_Participant EP ON P.pid = EP.pid
21CS30054-> JOIN Event E ON EP.eid = E.eid
21CS30054-> WHERE C.name = 'IITB' AND E.ename = 'Megaevent';
     name      
---------------
 Noah Centineo
(1 row)

21CS30054=> SELECT DISTINCT C.name
21CS30054-> FROM College C
21CS30054-> JOIN Participant P ON C.name = P.college_name
21CS30054-> JOIN Event_Participant EP ON P.pid = EP.pid
21CS30054-> JOIN Event E ON EP.eid = E.eid
21CS30054-> WHERE E.ename = 'Megaevent';
 name 
------
 IITB
(1 row)

21CS30054=> SELECT DISTINCT E.ename
21CS30054-> FROM Event E
21CS30054-> JOIN Manage M ON E.eid = M.eid
21CS30054-> JOIN Student S ON M.student_roll = S.roll
21CS30054-> JOIN Role R ON S.roll = R.student_roll
21CS30054-> WHERE R.rname = 'Secretary';
   ename   
-----------
 Megaevent
(1 row)

21CS30054=> SELECT S.name
21CS30054-> FROM Student S
21CS30054-> JOIN Volunteer V ON S.roll = V.roll
21CS30054-> JOIN Event_Volunteer EV ON V.roll = EV.volunteer_roll
21CS30054-> JOIN Event E ON EV.eid = E.eid
21CS30054-> WHERE S.dept = 'CSE' AND E.ename = 'Megaevent';
ERROR:  operator does not exist: character varying = integer
LINE 3: JOIN Volunteer V ON S.roll = V.roll
                                   ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
21CS30054=> ALTER TABLE Event_Volunteer DROP CONSTRAINT event_volunteer_volunteer_roll_fkey;
ALTER TABLE
21CS30054=> ALTER TABLE Volunteer ALTER COLUMN Roll TYPE varchar;
ALTER TABLE
21CS30054=> ALTER TABLE Event_Volunteer ALTER COLUMN Volunteer_Roll TYPE varchar;
ALTER TABLE
21CS30054=> ALTER TABLE Event_Volunteer ADD CONSTRAINT event_volunteer_volunteer_roll_fkey FOREIGN KEY (Volunteer_Roll) REFERENCES Volunteer(Roll);
ALTER TABLE
21CS30054=> SELECT S.name
21CS30054-> FROM Student S
21CS30054-> JOIN Volunteer V ON S.roll = V.roll
21CS30054-> JOIN Event_Volunteer EV ON V.roll = EV.volunteer_roll
21CS30054-> JOIN Event E ON EV.eid = E.eid
21CS30054-> WHERE S.dept = 'CSE' AND E.ename = 'Megaevent';
 name 
------
(0 rows)

21CS30054=> SELECT DISTINCT E.ename
21CS30054-> FROM Event E
21CS30054-> JOIN Event_Volunteer EV ON E.eid = EV.eid
21CS30054-> JOIN Volunteer V ON EV.volunteer_roll = V.roll
21CS30054-> JOIN Student S ON V.roll = S.roll
21CS30054-> WHERE S.dept = 'CSE';
 ename 
-------
(0 rows)

21CS30054=> SELECT C.name
21CS30054-> FROM College C
21CS30054-> JOIN Participant P ON C.name = P.college_name
21CS30054-> JOIN Event_Participant EP ON P.pid = EP.pid
21CS30054-> JOIN Event E ON EP.eid = E.eid
21CS30054-> WHERE E.ename = 'Megaevent'
21CS30054-> GROUP BY C.name
21CS30054-> ORDER BY COUNT(P.pid) DESC
21CS30054-> LIMIT 1;
 name 
------
 IITB
(1 row)

21CS30054=> SELECT C.name
21CS30054-> FROM College C
21CS30054-> JOIN Participant P ON C.name = P.college_name
21CS30054-> GROUP BY C.name
21CS30054-> ORDER BY COUNT(P.pid) DESC
21CS30054-> LIMIT 1;
 name 
------
 IITB
(1 row)

21CS30054=> SELECT S.dept, COUNT(DISTINCT V.roll) as volunteer_count
21CS30054-> FROM student S
21CS30054-> JOIN volunteer V ON S.roll = V.roll
21CS30054-> JOIN event_volunteer EV ON V.roll = EV.volunteer_roll
21CS30054-> JOIN event E ON EV.eid = E.eid
21CS30054-> JOIN event_participant EP ON E.eid = EP.eid
21CS30054-> JOIN participant P ON EP.pid = P.pid
21CS30054-> WHERE P.college_name = 'IITB'
21CS30054-> GROUP BY S.dept
21CS30054-> ORDER BY COUNT(DISTINCT V.roll) DESC
21CS30054-> LIMIT 1;
 dept | volunteer_count 
------+-----------------
(0 rows)